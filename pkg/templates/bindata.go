// Code generated by go-bindata.
// sources:
// data/licenses/Apache2.tmpl
// data/licenses/MIT.tmpl
// data/templates/.gitignore
// data/templates/.kitchen.yaml
// data/templates/defaults/main.yml
// data/templates/handlers/main.yml
// data/templates/meta/main.yml
// data/templates/tasks/main.yml
// data/templates/vars/main.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _licensesApache2Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xc1\x8e\x9b\x30\x10\x86\xef\xfb\x14\xbf\x72\x6a\xa5\x14\xaf\xf6\xd8\x9e\x68\x36\x55\x51\x57\x20\x85\x6c\x57\x7b\x9c\xc0\x00\x23\x19\xdb\xb5\x4d\x59\xb4\xca\xbb\x57\x40\x52\x35\xaa\x4f\x96\xe7\xf7\xe7\x6f\xc6\x4a\x61\x67\xdd\xe4\xa5\xed\x22\xde\xdf\x93\x89\xc9\x9f\xcf\xf3\x6e\x08\xec\x73\xea\xf9\x7c\xbe\x53\xea\x4e\x29\xe0\x49\x2a\x36\x81\x6b\x0c\xa6\x66\x8f\xd8\x31\x52\x47\x55\xc7\xd7\xca\x16\x3f\xd9\x07\xb1\x06\x0f\xc9\x3d\x3e\xcc\x81\xcd\xa5\xb4\xf9\xf8\x65\x61\x60\xb2\x03\x7a\x9a\x60\x6c\xc4\x10\x18\xb1\x93\x80\x46\x34\x83\xdf\x2a\x76\x11\x62\x50\xd9\xde\x69\x21\x53\x31\x46\x89\xdd\xf2\xd2\x85\x93\xac\x94\xd7\x0b\xc5\x9e\x22\x89\x01\xa1\xb2\x6e\x82\x6d\xfe\x8d\x82\xe2\xd5\x7c\x59\x5d\x8c\xee\xb3\x52\xe3\x38\x26\xb4\x68\x27\xd6\xb7\x4a\xaf\xe1\xa0\x9e\xb2\xdd\x3e\x2f\xf7\x9f\x1e\x92\xfb\xbf\xd7\x9e\x8d\xe6\x10\xe0\xf9\xd7\x20\x9e\x6b\x9c\x26\x90\x73\x5a\x2a\x3a\x69\x86\xa6\x11\xd6\x83\x5a\xcf\x5c\x23\xda\x59\x7d\xf4\x12\xc5\xb4\x5b\x04\xdb\xc4\x91\x3c\xaf\xa0\x5a\x42\xf4\x72\x1a\xe2\xcd\xf4\xae\xa2\x12\x6e\x02\xd6\x80\x0c\x36\x69\x89\xac\xdc\xe0\x6b\x5a\x66\xe5\x76\xc5\xbc\x64\xc7\xef\xc5\xf3\x11\x2f\xe9\xe1\x90\xe6\xc7\x6c\x5f\xa2\x38\x60\x57\xe4\x8f\xd9\x31\x2b\xf2\x12\xc5\x37\xa4\xf9\x2b\x7e\x64\xf9\xe3\x16\x2c\xb1\x63\x0f\x7e\x73\x7e\xee\xc2\x7a\xc8\x3c\x57\xae\x2f\x43\x2c\x99\x6f\x34\x1a\xbb\x6a\x05\xc7\x95\x34\x52\x41\x93\x69\x07\x6a\x19\xad\xfd\xcd\xde\x88\x69\xe1\xd8\xf7\x12\xe6\x3f\x0e\x20\x53\xaf\x20\x2d\xbd\x44\x8a\xcb\xe1\x7f\xdd\x25\x7f\x02\x00\x00\xff\xff\x06\x36\xfc\x9f\x63\x02\x00\x00")

func licensesApache2TmplBytes() ([]byte, error) {
	return bindataRead(
		_licensesApache2Tmpl,
		"licenses/Apache2.tmpl",
	)
}

func licensesApache2Tmpl() (*asset, error) {
	bytes, err := licensesApache2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "licenses/Apache2.tmpl", size: 611, mode: os.FileMode(420), modTime: time.Unix(1510646587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _licensesMitTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\x4f\x6f\xe2\x38\x14\xbf\xcf\xa7\xf8\xa9\xa7\x19\x29\x2a\xf7\xbd\xb9\x89\x21\xd6\x06\x1b\x39\x66\x58\x8e\x26\x31\x8d\x57\x21\x46\xb1\xb3\x15\x1a\xf5\xbb\xaf\x9e\xa1\x53\x75\x4e\x10\xbf\xf7\xfb\xfb\x56\x2b\x6c\x85\x41\xe3\x3b\x37\x45\xf7\xed\xdb\x6a\x85\x32\x5c\x6f\xb3\x7f\x1d\x12\xbe\x77\x3f\xf0\xeb\x17\x9e\x6f\xce\xce\x78\x7f\xcf\xff\x97\xe8\x66\x69\x2f\x0e\xef\xef\x79\x7b\xe7\xe6\x8b\x8f\xd1\x87\x09\x3e\x62\x70\xb3\x3b\xdd\xf0\x3a\xdb\x29\xb9\xbe\xc0\x79\x76\x0e\xe1\x8c\x6e\xb0\xf3\xab\x2b\x90\x02\xec\x74\xc3\xd5\xcd\x31\x4c\x08\xa7\x64\xfd\xe4\xa7\x57\x58\x74\xe1\x7a\x23\xbe\x70\x46\x1a\x7c\x44\x0c\xe7\xf4\x66\x67\x07\x3b\xf5\xb0\x31\x86\xce\xdb\xe4\x7a\xf4\xa1\x5b\x2e\x6e\x4a\x36\x91\xe4\xd9\x8f\x2e\xe2\x7b\x1a\x1c\x9e\xda\x07\xe2\xe9\x47\xd6\xe9\x9d\x1d\x89\xd0\x4f\xa0\xf1\xc7\x14\x6f\x3e\x0d\x61\x49\x98\x5d\x4c\xb3\xef\x88\xa6\x80\x9f\xba\x71\xe9\xc9\xc9\xc7\x78\xf4\x17\xff\x10\x21\x78\x2e\x24\x12\x5f\x0a\x58\xa2\x2b\xb2\xe1\x02\x97\xd0\xfb\x33\xfd\xba\x9c\xef\xba\x9c\x46\x1f\x87\x02\xbd\x27\xf6\xd3\x92\x5c\x81\x48\x8f\xb9\xdf\x82\xd2\xac\xc2\x8c\xe8\xc6\x6c\xae\x0b\x57\xef\xe2\x3d\xf4\xa7\xc7\xbc\x46\x42\x57\x2a\x37\x3d\xea\x8a\xf4\xf2\x36\x84\xcb\xd7\x3c\x3e\xbb\x3a\x2f\xf3\xe4\xe3\xe0\x32\xac\x0f\x88\x21\xeb\xfe\xeb\xba\x44\x2f\x84\x38\x87\x71\x0c\x6f\x94\xb1\x0b\x53\xef\x29\x5a\xfc\x2b\xdf\xd0\x0c\x0e\xf6\x14\xfe\x73\x39\xd4\xfd\xf6\x53\x48\xbe\xbb\xb7\x9f\xef\x71\xfd\xbc\xf3\x63\x14\x07\x3b\x8e\x38\xb9\x47\x79\xae\xa7\xaa\xed\xd7\x5c\x33\x99\x88\xc9\x4e\xc9\xdb\x11\xd7\x30\x67\xd5\x3f\xf3\x3e\xdf\x5d\xd4\x1c\xad\x5a\x9b\x03\xd3\x1c\xa2\xc5\x4e\xab\x9f\xa2\xe2\x15\x9e\x58\x0b\xd1\x3e\x15\x38\x08\x53\xab\xbd\xc1\x81\x69\xcd\xa4\x39\x42\xad\xc1\xe4\x11\x7f\x0b\x59\x15\xe0\xff\xec\x34\x6f\x5b\x28\x4d\x6c\x62\xbb\x6b\x04\xaf\x0a\x08\x59\x36\xfb\x4a\xc8\x0d\x5e\xf6\x06\x52\x19\x34\x62\x2b\x0c\xaf\x60\x54\xd6\x7c\xb0\x09\xde\x12\xdf\x96\xeb\xb2\x66\xd2\xb0\x17\xd1\x08\x73\x2c\x88\x6b\x2d\x8c\x24\xe6\xb5\xd2\x60\xd8\x31\x6d\x44\xb9\x6f\x98\xc6\x6e\xaf\x77\xaa\xe5\x60\xb2\x82\x54\x52\xc8\xb5\x16\x72\xc3\xb7\x5c\x9a\x67\x08\x09\xa9\xc0\x7f\x72\x69\xd0\xd6\xac\x69\x48\x8d\xe8\xd8\xde\xd4\x4a\x93\x51\x94\x6a\x77\xd4\x62\x53\x1b\xd4\xaa\xa9\xb8\x6e\xf1\xc2\xd1\x08\xf6\xd2\xf0\xbb\x9a\x3c\xa2\x6c\x98\xd8\x16\xa8\xd8\x96\x6d\x78\x46\x29\x53\xf3\x1c\x92\x36\xef\x36\x71\xa8\x39\xbd\x92\x2a\x93\x60\xa5\x11\x4a\x52\x9e\x52\x49\xa3\x59\x69\x0a\x18\xa5\xcd\x6f\xf4\x41\xb4\xbc\x00\xd3\xa2\xa5\x66\xd6\x5a\x6d\x73\x52\x6a\x57\xad\x69\x4b\x48\x82\x4a\x7e\x27\xa2\xe6\xbf\x1e\x48\xe9\xfc\xbd\x6f\xf9\x6f\x4e\x54\x9c\x35\x42\x6e\x5a\x02\x3f\xb2\x7e\xec\x3f\xff\x1f\x00\x00\xff\xff\x84\x88\x29\x47\x69\x04\x00\x00")

func licensesMitTmplBytes() ([]byte, error) {
	return bindataRead(
		_licensesMitTmpl,
		"licenses/MIT.tmpl",
	)
}

func licensesMitTmpl() (*asset, error) {
	bytes, err := licensesMitTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "licenses/MIT.tmpl", size: 1129, mode: os.FileMode(420), modTime: time.Unix(1510646582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\xcf\x6a\x34\x21\x10\xc4\xef\xfd\x14\x82\xb7\x81\x4f\x9f\xe1\x23\x3b\x59\x36\x10\x08\x59\xc8\x49\x08\x8e\xdb\x99\x35\xf1\x1f\x76\xef\x2c\x73\xc9\xb3\x87\x9e\x49\x2e\xda\xf5\xd3\xb2\x4a\xad\xb5\x7a\x8c\x09\x49\x71\x55\x13\xaa\x38\x97\xda\xf1\xa2\xa6\x55\x1d\x23\x2b\xad\x35\x80\x56\xaf\xb7\x69\x85\x23\xe6\x8f\x98\xd0\xa4\x1a\xbe\x04\xbe\xf9\xb9\xfb\xc2\x60\x9d\x59\xf6\xd1\x82\x65\x24\x26\xdb\x6b\x42\xb2\x72\xe9\x54\x18\x53\x8a\x4f\xea\x74\x18\xff\x83\x1d\x9c\x89\xad\xef\xfb\x9d\xc4\x1a\x2f\xe8\x2d\x0c\xc3\x86\x72\x12\xcf\x18\x52\x6c\x84\x72\x1a\x92\x27\x6a\x9e\xaf\x22\x5a\xaf\x9f\x18\xb6\x40\x42\xe6\x58\xe6\x3d\x63\xcc\x3e\x10\x98\xe1\x5b\xc4\xcb\xca\xd7\x5a\xb6\x07\x4d\x5b\x83\xa0\x67\x1f\x44\x3b\x73\x38\xbf\x9f\xb9\x76\x14\xf8\x70\x23\xae\x59\x0a\xe7\x26\xbd\x65\xc5\xb2\x2c\xbe\xd3\xbf\xdf\xef\x80\x33\x83\x33\x74\x6f\x7f\x43\x05\x67\xb0\x2c\xb1\xd7\x02\x3f\x01\x00\x00\xff\xff\x06\xdd\x6e\x2e\x39\x01\x00\x00")

func templatesGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignore,
		"templates/.gitignore",
	)
}

func templatesGitignore() (*asset, error) {
	bytes, err := templatesGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.gitignore", size: 313, mode: os.FileMode(420), modTime: time.Unix(1510665721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKitchenYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcd\x6e\xdb\x30\x0c\xc7\xef\x7a\x0a\xde\x7a\x52\x04\x0c\x45\x07\xe8\x65\x0c\xc9\xa1\x63\xa2\x0a\xa5\x91\x94\xd1\xa0\xc8\xbb\x0f\x6a\x96\xd6\x5b\x80\x1d\xea\x13\xcd\x1f\xff\xfc\x12\xdf\xdf\xe1\x50\x68\x46\x56\x84\xeb\xd5\x79\xef\xdd\x51\x68\x43\x89\x0e\x80\xd3\x19\x23\x6c\xe9\x24\x89\xcd\xb9\x56\x92\x2d\x55\xce\x3a\x98\xff\x43\x67\x64\xab\xea\x7f\x1e\x7e\x38\x00\x80\x9b\x78\x6a\xa5\x9f\x88\xbf\xb4\x3b\x34\x57\x5e\xe8\x14\x3f\x5c\x00\xb9\xbe\x45\x68\xbd\x35\xb4\x92\xb2\x86\xaf\x74\xfe\xe5\xd9\x73\x9d\xcf\xbb\x5a\x3d\x77\xb6\xee\xdf\x90\x29\x95\xef\x97\xbb\xa5\x09\xb7\x34\x2f\xcf\xce\x35\xa9\x1b\x29\x55\xde\x8f\x9d\x58\x29\x17\x9c\x5a\x49\x97\x5c\xeb\xab\x03\x58\xab\x9a\x46\x30\x54\xf3\xaf\x64\xf3\x8a\xec\xe0\x33\x70\x43\xc9\x55\x31\x82\x49\xc7\x07\x3f\xd9\x25\xc2\xd8\x91\xe0\xaf\x4e\x82\xd3\x1d\x0b\xb6\xfa\xa9\xf9\x17\xd6\x33\x53\xee\xfa\xc0\xe7\x15\x97\x69\xa9\x32\xe5\xae\x8a\x12\x61\x49\x45\xd1\x39\xb7\xa1\xd0\x42\xfb\x39\x14\x65\x43\xd1\x86\xb3\x03\xc8\x9d\x8f\x65\x2c\x2c\xd9\x1a\xe1\x29\x74\x95\x50\xea\x9c\x4a\xc8\xc4\x4f\xa3\xc0\x08\xfc\x0f\xee\xf9\x32\x65\xe2\x23\xc9\x9d\x7f\x10\xa7\x9d\x0c\xff\x3a\x8c\x23\x2e\xa9\x97\xdb\x5b\xec\xbb\x1a\x5f\x4b\x66\x28\xac\xf7\xff\xa1\x92\x5a\x50\xc3\xb8\xc7\x61\xc1\xf5\x1a\xc6\x9e\x03\xb1\xe1\x49\x92\x51\xe5\x30\x7a\x0b\x6b\xcf\xd3\x30\x0e\x92\x1d\xc0\xef\x00\x00\x00\xff\xff\x74\x9b\xe7\x93\xc0\x02\x00\x00")

func templatesKitchenYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesKitchenYaml,
		"templates/.kitchen.yaml",
	)
}

func templatesKitchenYaml() (*asset, error) {
	bytes, err := templatesKitchenYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.kitchen.yaml", size: 704, mode: os.FileMode(420), modTime: time.Unix(1510665073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDefaultsMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\xcb\xc9\x4c\x4e\xcd\x2b\x4e\x55\xa8\xad\xe5\xd2\xd5\xd5\xe5\x02\x04\x00\x00\xff\xff\x75\x19\xc7\x21\x13\x00\x00\x00")

func templatesDefaultsMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultsMainYml,
		"templates/defaults/main.yml",
	)
}

func templatesDefaultsMainYml() (*asset, error) {
	bytes, err := templatesDefaultsMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/defaults/main.yml", size: 19, mode: os.FileMode(420), modTime: time.Unix(1510646550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHandlersMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\xcb\xc9\x4c\x4e\xcd\x2b\x4e\x55\xa8\xad\xe5\xd2\xd5\xd5\xe5\x02\x04\x00\x00\xff\xff\x75\x19\xc7\x21\x13\x00\x00\x00")

func templatesHandlersMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHandlersMainYml,
		"templates/handlers/main.yml",
	)
}

func templatesHandlersMainYml() (*asset, error) {
	bytes, err := templatesHandlersMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/handlers/main.yml", size: 19, mode: os.FileMode(420), modTime: time.Unix(1510646105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMetaMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xc1\x6a\x1b\x41\x10\x44\xef\xfb\x15\x15\x74\xf0\xc5\xd2\x07\x08\x61\x43\x70\x02\x09\xb9\x85\x7c\x40\x6b\xa7\xa4\x1d\x32\xea\x5e\x66\x7a\xa4\x08\xcb\xff\x1e\x66\xb5\xb1\x74\x88\x0f\x0b\xbd\xdd\x14\x55\xf5\xe6\xf5\x15\xab\x14\x7b\x6a\x21\xde\xde\xba\xe5\x72\xd9\x2d\xf0\x93\x5e\x47\x04\x8e\xd4\x40\xed\x23\x0b\x06\x66\xae\xbb\x05\x80\x97\xfb\xb5\x64\x62\xac\x29\x31\x20\xaa\x1b\x7c\x20\xc6\x24\x67\x88\x06\xf0\x0f\xfb\xea\xd3\x09\x96\x03\xf3\xa4\xb7\x1d\x64\x1c\x29\x59\xb4\xe7\xaa\xbb\x77\x59\x77\xc0\x12\x25\xf7\x6b\x6c\xf6\xd1\x91\x39\x1a\x54\x0e\x7c\xea\x00\x4c\xd3\x1a\x9b\x6c\x89\xf3\xb6\x03\x16\xed\xc3\x67\x26\x3b\x4d\x69\x24\xa5\x96\xc0\x77\x96\x0f\x05\x7d\xcd\x99\xea\xe9\x0c\x39\x4a\x4c\xb2\x4d\x5c\xe1\x7b\x2d\x8e\xaa\xbd\x1d\x0e\x54\x9f\xf4\x2d\xb7\x29\x0b\x7c\x10\x6f\xf9\xd2\x19\x6e\x38\x5b\xcd\x68\x7e\x2b\x7c\xdb\xb5\x3f\x04\xd3\x07\x47\x21\xa7\xdb\xa4\xfd\xe7\x06\x53\xf8\x10\x0b\x52\x2c\xfe\x88\x44\x47\x2d\xf8\xad\x2d\x98\x06\x9c\xf8\x90\x12\xf6\x74\x44\x87\x84\xc0\xf0\x69\x8e\xff\x1e\xf7\xda\x7f\xae\xf9\xe5\xc7\xe5\x2b\x83\x65\xb9\xfc\xda\x56\xf5\x7a\x79\xe1\x36\x8a\x5e\x51\x1c\x99\x4b\x34\x9d\x14\x4d\xf3\xfc\x7c\x3f\x74\xff\x61\xd2\x8b\x73\x6f\xb9\x3d\xda\xc7\x50\xa4\xe0\x14\x7d\x78\x47\x72\x03\x29\x5b\x3b\xf2\xf1\x46\x0d\x3e\x58\xe1\x87\xb8\xe6\x66\x37\xd3\x6b\xb5\xcd\x53\xf7\x37\x00\x00\xff\xff\xf7\x89\x03\x11\x71\x02\x00\x00")

func templatesMetaMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMetaMainYml,
		"templates/meta/main.yml",
	)
}

func templatesMetaMainYml() (*asset, error) {
	bytes, err := templatesMetaMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/meta/main.yml", size: 625, mode: os.FileMode(420), modTime: time.Unix(1510665060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTasksMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\xcb\xc9\x4c\x4e\xcd\x2b\x4e\x55\xa8\xad\xe5\xd2\xd5\xd5\xe5\x02\x04\x00\x00\xff\xff\x75\x19\xc7\x21\x13\x00\x00\x00")

func templatesTasksMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTasksMainYml,
		"templates/tasks/main.yml",
	)
}

func templatesTasksMainYml() (*asset, error) {
	bytes, err := templatesTasksMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tasks/main.yml", size: 19, mode: os.FileMode(420), modTime: time.Unix(1510646061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\xcb\xc9\x4c\x4e\xcd\x2b\x4e\x55\xa8\xad\xe5\xd2\xd5\xd5\xe5\x02\x04\x00\x00\xff\xff\x75\x19\xc7\x21\x13\x00\x00\x00")

func templatesVarsMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsMainYml,
		"templates/vars/main.yml",
	)
}

func templatesVarsMainYml() (*asset, error) {
	bytes, err := templatesVarsMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars/main.yml", size: 19, mode: os.FileMode(420), modTime: time.Unix(1510646066, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"licenses/Apache2.tmpl": licensesApache2Tmpl,
	"licenses/MIT.tmpl": licensesMitTmpl,
	"templates/.gitignore": templatesGitignore,
	"templates/.kitchen.yaml": templatesKitchenYaml,
	"templates/defaults/main.yml": templatesDefaultsMainYml,
	"templates/handlers/main.yml": templatesHandlersMainYml,
	"templates/meta/main.yml": templatesMetaMainYml,
	"templates/tasks/main.yml": templatesTasksMainYml,
	"templates/vars/main.yml": templatesVarsMainYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"licenses": &bintree{nil, map[string]*bintree{
		"Apache2.tmpl": &bintree{licensesApache2Tmpl, map[string]*bintree{}},
		"MIT.tmpl": &bintree{licensesMitTmpl, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{templatesGitignore, map[string]*bintree{}},
		".kitchen.yaml": &bintree{templatesKitchenYaml, map[string]*bintree{}},
		"defaults": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesDefaultsMainYml, map[string]*bintree{}},
		}},
		"handlers": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesHandlersMainYml, map[string]*bintree{}},
		}},
		"meta": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesMetaMainYml, map[string]*bintree{}},
		}},
		"tasks": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesTasksMainYml, map[string]*bintree{}},
		}},
		"vars": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesVarsMainYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

