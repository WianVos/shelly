// Code generated by go-bindata.
// sources:
// data/licenses/Apache2.tmpl
// data/licenses/MIT.tmpl
// data/templates/defaults/main.yml
// data/templates/handlers/main.yml
// data/templates/tasks/main.yml
// data/templates/vars/main.yml
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _licensesApache2Tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6f\x9b\x40\x10\x85\xef\xf9\x15\x4f\x3e\xb5\x92\x4b\xa2\x1c\xdb\x13\x75\x5c\x15\x35\xc5\x92\x71\x1a\xe5\x38\x86\x01\x46\x85\xdd\xed\xec\x52\x82\x2c\xfe\x7b\x85\xe3\x48\xb5\x62\x0e\xe1\x84\x76\x66\xbe\x37\xfb\xde\x1e\x0e\x88\x72\xdb\xb6\x6c\xc2\x4f\xd2\xdf\xac\x18\x47\xac\xac\x1b\x54\xaa\x3a\xe0\x70\x88\x06\x26\x1d\xc7\xe9\xaf\xf3\xac\x29\xb5\x3c\x8e\x57\x97\xc6\x2e\x1e\x02\xf7\x92\xb3\xf1\x5c\xa0\x33\x05\x2b\x42\xcd\x88\x1d\xe5\x35\xbf\x56\x96\xf8\xc5\xea\xc5\x1a\xdc\x46\x37\xf8\x30\x35\x2c\x4e\xa5\xc5\xc7\x2f\x33\x54\x0c\xb6\x43\x4b\x03\x8c\x0d\xe8\x3c\x23\xd4\xe2\x51\x4a\xc3\xe0\xe7\x9c\x5d\x80\x18\xe4\xb6\x75\x8d\x90\xc9\x19\xbd\x84\xfa\xa8\x7d\x22\x47\x73\xdc\xa7\x13\xd7\xee\x03\x89\x01\x21\xb7\x6e\x80\x2d\xff\x1f\x06\x85\xf7\x38\x70\xfc\xea\x10\xdc\xe7\x4b\xf5\xbe\xef\x23\x3a\x1a\x12\x59\xad\xae\x9b\x17\x09\x7f\x7d\x9f\xac\xd6\x69\xb6\xfe\x74\x1b\xdd\xbc\x4b\xec\xc1\x34\xec\x3d\x94\xff\x74\xa2\x5c\x60\x3f\x80\x9c\x6b\x24\xa7\x7d\xc3\x68\xa8\x87\x55\x50\xa5\xcc\x05\x82\x9d\x6c\xea\x55\x82\x98\x6a\x09\x6f\xcb\xd0\x93\xf2\x1c\xba\x10\x1f\x54\xf6\x5d\x38\x4b\xf3\xd5\x14\xf1\x67\x0d\xd6\x80\x0c\x16\x71\x86\x24\x5b\xe0\x6b\x9c\x25\xd9\x72\x0e\xfc\x98\xec\xbe\x6f\x1e\x76\x78\x8c\xb7\xdb\x38\xdd\x25\xeb\x0c\x9b\x2d\x56\x9b\xf4\x2e\xd9\x25\x9b\x34\xc3\xe6\x1b\xe2\xf4\x09\x3f\x92\xf4\x6e\x09\x96\x50\xb3\x82\x9f\x9d\x4e\x37\xb5\x0a\x99\x72\xe6\x62\x36\xd4\x8c\xf9\x6c\xd5\xd2\xbe\xac\xee\x1d\xe7\x52\x4a\x8e\x86\x4c\xd5\x51\xc5\xa8\xec\x5f\x56\x23\xa6\x82\x63\x6d\xc5\x4f\xef\xd2\x83\x4c\x31\x87\x6e\xa4\x95\x40\xe1\xd8\xf6\xc6\x93\xe8\xea\x5f\x00\x00\x00\xff\xff\x99\x16\x27\x17\x60\x03\x00\x00")

func licensesApache2TmplBytes() ([]byte, error) {
	return bindataRead(
		_licensesApache2Tmpl,
		"licenses/Apache2.tmpl",
	)
}

func licensesApache2Tmpl() (*asset, error) {
	bytes, err := licensesApache2TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "licenses/Apache2.tmpl", size: 864, mode: os.FileMode(420), modTime: time.Unix(1510224497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _licensesMitTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xcf\x8f\xe2\x36\x18\xbd\xef\x5f\xf1\x34\xa7\x5d\x29\x9a\xde\x7b\xf3\x10\x43\xac\x26\x36\x72\xcc\x52\x8e\x26\x31\x13\xb7\x21\x46\xb6\xe9\x08\xad\xe6\x7f\xaf\xbe\xc0\xec\x6a\x2a\x50\x4f\x10\xfb\x7b\x3f\xbe\xf7\xfc\xe3\x07\x9e\xbb\x70\x3c\xba\x29\x37\x36\xfe\xed\x22\xde\xdf\xd1\x08\x83\xda\x77\x6e\x4a\xee\xcb\x97\xbb\x13\x8b\x70\xba\x44\xff\x3a\x64\x7c\xed\xbe\x81\x46\x2e\xce\xce\x37\xf4\xff\x9c\x5c\x94\xf6\xe8\xf0\xfe\xfe\x00\xbf\x76\xf1\xe8\x53\xf2\x61\x82\x4f\x18\x5c\x74\xfb\x0b\x5e\xa3\x9d\xb2\xeb\x0b\x1c\xa2\x73\x08\x07\x74\x83\x8d\xaf\xae\x40\x0e\xb0\xd3\x05\x27\x17\x53\x98\x10\xf6\xd9\xfa\xc9\x4f\xaf\xb0\xe8\xc2\xe9\x72\x5f\x21\x1c\x90\x07\x9f\x90\xc2\x21\xbf\xd9\xe8\x60\xa7\x1e\x36\xa5\xd0\x79\x9b\x5d\x8f\x3e\x74\x67\x42\xd8\x4c\x26\x0e\x7e\x74\x09\x5f\xf3\xe0\xf0\xd4\xde\x10\x4f\xdf\x66\xe5\xde\xd9\xf1\xbe\x84\x9f\x40\x80\x8f\x79\xbc\xf9\x3c\x84\x73\x46\x74\x29\x47\xdf\x11\x71\x01\x3f\x75\xe3\xb9\x27\xb7\x1f\xd7\xa3\x3f\xfa\x9b\x2c\xc1\xe7\x18\xd3\x7d\x85\x1c\x70\x4e\xae\x98\xd7\x2c\x70\x0c\xbd\x3f\xd0\xaf\x9b\x53\x39\x9d\xf7\xa3\x4f\x43\x81\xde\x93\xde\xfe\x9c\x5d\x81\x44\x87\x73\x73\x05\x6d\xfc\x5b\x88\x48\x6e\x7c\xb0\x40\x17\x4e\xde\xa5\x6b\x54\xbf\xf6\x98\x81\x24\x7d\xa2\x92\xf2\x2d\xf6\x44\x27\x6f\x43\x38\x7e\xde\xd9\x3f\x70\x7e\x38\xc7\xc9\xa7\xc1\xcd\x44\x7d\x40\x0a\xb3\xb7\xbf\x5c\x97\xe9\x84\x38\x0e\x61\x1c\xc3\x1b\x25\xd3\x85\xa9\xf7\x14\x48\xfa\xfd\xc1\x7b\x31\x83\x83\xdd\x87\x7f\xdc\x1c\xc5\xf5\xe5\x4d\x21\xfb\xee\xda\xeb\xdc\xf4\xe9\xd7\x9b\xba\x5d\xa5\xc1\x8e\x23\xf6\xee\x56\x82\xeb\xa9\x32\xfb\x7f\x69\x44\x32\x9a\xb2\x9d\xb2\xb7\x23\x4e\x21\xce\xce\xfe\x9b\xd2\xf3\x23\xa7\x15\x47\xab\x96\x66\xcb\x34\x87\x68\xb1\xd6\xea\xbb\x28\x79\x89\x27\xd6\x42\xb4\x4f\x05\xb6\xc2\x54\x6a\x63\xb0\x65\x5a\x33\x69\x76\x50\x4b\x30\xb9\xc3\x1f\x42\x96\x05\xf8\x9f\x6b\xcd\xdb\x16\x4a\xdf\xe7\x17\xcd\xba\x16\xbc\x2c\x20\xe4\xa2\xde\x94\x42\xae\xf0\xb2\x31\x90\xca\xa0\x16\x8d\x30\xbc\x84\x51\xb3\x8b\x1b\xbf\xe0\x2d\x29\x34\x5c\x2f\x2a\x26\x0d\x7b\x11\xb5\x30\xbb\xe2\x3e\xfb\x52\x18\x49\xea\x4b\xa5\xc1\xb0\x66\xda\x88\xc5\xa6\x66\x1a\xeb\x8d\x5e\xab\x96\x83\xc9\x12\x52\x49\x21\x97\x5a\xc8\x15\x6f\xb8\x34\xcf\x10\x12\x52\x81\x7f\xe7\xd2\xa0\xad\x58\x5d\x93\xfe\x7d\x01\xb6\x31\x95\xd2\xb4\x1e\x16\x6a\xbd\xd3\x62\x55\x19\x54\xaa\x2e\xb9\x6e\xf1\xc2\x51\x0b\xf6\x52\xf3\xab\xbe\xdc\x61\x51\x33\xd1\x14\x28\x59\xc3\x56\x7c\x46\x29\x53\xf1\x07\xd1\x10\xf6\xba\x1c\xb6\x15\xa7\x39\x72\xc6\x24\xd8\xc2\x08\x25\x29\x85\x85\x92\x46\xb3\x85\x29\x60\x94\x36\x3f\xf9\xb6\xa2\xe5\x05\x98\x16\x2d\xe5\xb9\xd4\xaa\x79\x90\x0f\xf5\xa6\x96\x84\x13\x92\xc8\x24\xbf\x52\x53\xa7\x9f\xab\x57\x7a\xfe\xde\xb4\xfc\xa7\x0a\x4a\xce\x6a\x21\x57\x2d\x81\x1f\x26\xf4\xc1\xf0\xfc\x6f\x00\x00\x00\xff\xff\xe3\x81\x90\x14\x9b\x05\x00\x00")

func licensesMitTmplBytes() ([]byte, error) {
	return bindataRead(
		_licensesMitTmpl,
		"licenses/MIT.tmpl",
	)
}

func licensesMitTmpl() (*asset, error) {
	bytes, err := licensesMitTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "licenses/MIT.tmpl", size: 1435, mode: os.FileMode(420), modTime: time.Unix(1510224512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDefaultsMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\xaa\xae\x56\xd0\x4b\xce\xcf\xcd\x4d\xcd\x2b\xf1\x4d\x2c\xca\x4e\x2d\x52\xa8\xad\x05\x0b\x96\xa4\x16\x97\x18\x2a\xd4\xd6\x02\x02\x00\x00\xff\xff\x33\xd9\x47\x74\x25\x00\x00\x00")

func templatesDefaultsMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultsMainYml,
		"templates/defaults/main.yml",
	)
}

func templatesDefaultsMainYml() (*asset, error) {
	bytes, err := templatesDefaultsMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/defaults/main.yml", size: 37, mode: os.FileMode(420), modTime: time.Unix(1510585455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHandlersMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\xaa\xae\x56\xd0\x2b\x49\x2d\x2e\x31\x52\xa8\xad\x05\x04\x00\x00\xff\xff\x52\x43\x4b\xed\x10\x00\x00\x00")

func templatesHandlersMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHandlersMainYml,
		"templates/handlers/main.yml",
	)
}

func templatesHandlersMainYml() (*asset, error) {
	bytes, err := templatesHandlersMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/handlers/main.yml", size: 16, mode: os.FileMode(420), modTime: time.Unix(1510585462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTasksMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\xaa\xae\x56\xd0\x2b\x49\x2d\x2e\x31\x56\xa8\xad\x05\x04\x00\x00\xff\xff\x37\x24\xf7\x55\x10\x00\x00\x00")

func templatesTasksMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTasksMainYml,
		"templates/tasks/main.yml",
	)
}

func templatesTasksMainYml() (*asset, error) {
	bytes, err := templatesTasksMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tasks/main.yml", size: 16, mode: os.FileMode(420), modTime: time.Unix(1510585469, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsMainYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\xaa\xae\x56\xd0\x2b\x49\x2d\x2e\x31\x51\xa8\xad\x05\x04\x00\x00\xff\xff\x8e\x1c\x20\xc8\x10\x00\x00\x00")

func templatesVarsMainYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsMainYml,
		"templates/vars/main.yml",
	)
}

func templatesVarsMainYml() (*asset, error) {
	bytes, err := templatesVarsMainYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars/main.yml", size: 16, mode: os.FileMode(420), modTime: time.Unix(1510585476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"licenses/Apache2.tmpl": licensesApache2Tmpl,
	"licenses/MIT.tmpl": licensesMitTmpl,
	"templates/defaults/main.yml": templatesDefaultsMainYml,
	"templates/handlers/main.yml": templatesHandlersMainYml,
	"templates/tasks/main.yml": templatesTasksMainYml,
	"templates/vars/main.yml": templatesVarsMainYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"licenses": &bintree{nil, map[string]*bintree{
		"Apache2.tmpl": &bintree{licensesApache2Tmpl, map[string]*bintree{}},
		"MIT.tmpl": &bintree{licensesMitTmpl, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"defaults": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesDefaultsMainYml, map[string]*bintree{}},
		}},
		"handlers": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesHandlersMainYml, map[string]*bintree{}},
		}},
		"tasks": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesTasksMainYml, map[string]*bintree{}},
		}},
		"vars": &bintree{nil, map[string]*bintree{
			"main.yml": &bintree{templatesVarsMainYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

